#!/usr/bin/env php
<?php

namespace Framer;

use Framer\Core\App\Bootstrap;

use function Framer\Core\Useful\Classes\Generated\generateController;
use function Framer\Core\Useful\Classes\Generated\generateModel;
use function Framer\Core\Useful\Classes\Generated\generateRoute;

define('DEFAULT_PORT', 9000);

# the autoloader
# require_once __DIR__ . '/Autoloader.php';
require_once __DIR__ . '/Vendors/autoload.php';

if ( php_sapi_name() === 'cli' ) {
    # serving array
    $serving = [
        "port" => "-S localhost:9000"
    ];

    # getting cli params
    $params = $argv;

    # remove framer from params
    if ( $params[0] === 'framer' ) {
        $params = array_slice($params, 1);
    }

    if ( $params[0] === 'serve' ) {
        # bulding server array
        foreach ( $params as $k => $option ) {
            # get the next param
            $next = $params[$k + 1] ?? null;

            switch ( $option ) {
                case '-p':
                case '--port':
                    $serving['port'] = "-S 0.0.0.0:" . ($next ?? DEFAULT_PORT);
                    break;

                case '--dev':
                case '--share':
                    $serving['iptype'] = $option === '--dev' ? 'localhost' : '0.0.0.0';
                    $serving['port'] = "-S " . $serving['iptype'] . ":" . explode(':', $serving['port'])[1];
                    break;

                default:
                    # code...
                    break;
            }
        }

        # building query string
        $strings = [];

        # before, remove some stuffs
        unset($serving['iptype']);

        foreach ( $serving as $k => $string ) {
            $strings[] = $string;
        }

        $strings = implode(' ', $strings);

        # ehco all
        echo "\033[96m=========== <FRAMER> =============\033[39m\n\n";
        echo "\033[96mBuit-in server started ...\033[39m\n";
        echo "\033[39mListening on\033[1m\033[96m". str_replace('-S', '', str_replace(':', " \033[0mport\033[1m\033[96m ", $serving['port'])) ."\033[0m ...\033[39m\n";
        echo "\n\033[96m=========== </FRAMER> ============\033[39m\n";

        # then execute
        exec( "php $strings" );
    }
    else if ( preg_match("#g:[a-z0-9]+#", $params[0]) ) {
        if ( !$params[1] || !strlen(trim($params[1])) ) {
            echo "\033[31mError: What do you want to generate ?\033[39m\n\n";
        }

        $parts = explode(':', $params[0]);

        switch( $parts[1] ) {
            case 'controller':
                include_once __DIR__ . '/Core/Useful/Generated/generate.controller.php';

                $string = generateController($params[1]);
                @file_put_contents(__DIR__ . "/Src/Controllers/" . ucfirst($params[1]) . '.php', $string);
                echo "\033[96mSuccess: Controller [". ucfirst($params[1]) ."] successfuly created.\033[39m\n\n";
                break;

            case 'model':
                include_once __DIR__ . '/Core/Useful/Generated/generate.model.php';

                $string = generateModel($params[1], ($params[2] ?? 'blank'));
                @file_put_contents(__DIR__ . "/Src/Models/" . ucfirst($params[1]) . '.php', $string);
                echo "\033[96mSuccess: Model [". ucfirst($params[1]) ."] successfuly created.\033[39m\n\n";
                break;

            case 'route':
                include_once __DIR__ . '/Core/Useful/Generated/generate.route.php';
                $path = __DIR__ . "/Src/Routes/" . ucfirst($params[1]) . 'Routes.php';

                if (file_exists($path)) {
                    echo "\033[31mFailure: Route [". ucfirst($params[1]) ."] successfuly created.\033[39m\n\n";
                    break;
                }

                $string = generateRoute($params[1], ($params[2] ?? 'blank'));
                @file_put_contents($path, $string);
                echo "\033[96mSuccess: Route [". ucfirst($params[1]) ."] successfuly created.\033[39m\n\n";
                break;
        }
    }
    else if ($params[0] === 'build') {
        $env = $params[1];

        if (file_exists(__DIR__ . "/Configs/.env.$env")) {
            @rename(__DIR__ . "/Configs/.env", __DIR__ . '/Configs/.env.' . date('YmdHis'));
            @rename(__DIR__ . "/Configs/.env.$env", __DIR__ . '/Configs/.env');
        }
    }
    else if ($params[0] === 'migrate') {
        Bootstrap::boot();

        $filename = $params[1] . ".php";
        require_once __DIR__ . '/Database/' . $filename;

        echo "\033[96mMigration finished.\033[39m\n\n";
    }
    else if ($params[0] === 'phinx') {
        $_args = implode(" ", array_slice($params, 1));
        $bin = __DIR__ . "/Vendors/bin/phinx";

        if (file_exists($bin)) {
            echo "php $bin $_args \n";
            exec("php $bin $_args", $output);
            echo implode("\n", $output);
        }
    }

}
else {
    header('location: /');
}
